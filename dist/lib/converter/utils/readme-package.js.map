{"version":3,"file":"readme-package.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/readme-package.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as markdownLinkExtractor from 'markdown-link-extractor';\nimport * as escapeStringRegexp from 'escape-string-regexp';\n\nimport Readme from './readme';\n\n/**\n * Container for a readme linked collection.\n */\nexport default class ReadmePackage {\n\n    /**\n     * All the readme file definitions.\n     */\n    protected definitions: Readme[];\n\n    /**\n     * Creates a readme package.\n     *\n     * @param {Readme[]} definitions\n     *   The readme file definitions.\n     */\n    private constructor(definitions: Readme[]) {\n        this.definitions = definitions;\n    }\n\n    /**\n     * Create readme package from base file.\n     *\n     * @param {string} readmePath\n     *   The base readme path.\n     *\n     * @returns {ReadmePackage}\n     */\n    public static createFromBase(readmePath: string) {\n        let mdPages: Readme[] = [];\n        this.loadDefinitions(mdPages, Path.dirname(readmePath), Path.basename(readmePath));\n\n        return new this(mdPages);\n    }\n\n    /**\n     * Loads all linked readme file definitions from base readme.\n     *\n     * @param {Readme[]} pages\n     * @param {string} basePath\n     * @param {string} relativePath\n     * @param {boolean} isRoot\n     */\n    protected static loadDefinitions(pages: Readme[], basePath: string, relativePath: string, isRoot: boolean = true) {\n        const fullPath = Path.join(basePath, relativePath);\n        const readmeContents: string = FS.readFileSync(fullPath, 'utf-8');\n\n        // Get MD file links.\n        const mdFiles = markdownLinkExtractor(readmeContents).filter((link: string) => {\n            return !link.match(/^(ftp|https?):\\/\\/.*/) &&\n                link.match(/.*\\.md$/);\n        });\n\n        pages.push(new Readme(readmeContents, relativePath, isRoot));\n\n        // Gather MD file contents\n        mdFiles.forEach((filePath: string) => {\n            const fileFullPath = Path.join(basePath, filePath);\n            const normalizedPath = Path.normalize(filePath);\n\n            if (!FS.existsSync(fileFullPath)) {\n                return;\n            }\n\n            if (normalizedPath === Path.normalize(relativePath)) {\n                return;\n            }\n\n            // Parse only if we did not yet to prevent infinite loop.\n            if (!pages.find((readme) => readme.path === normalizedPath)) {\n                this.loadDefinitions(pages, basePath, normalizedPath, false);\n            }\n        });\n    }\n\n    /**\n     * Updates path of a given readme file.\n     *\n     * @param {Readme} readme\n     * @param {string} newPath\n     */\n    public updatePath(readme: Readme, newPath: string) {\n        if (!this.definitions.find((r) => readme === r)) {\n            return;\n        }\n\n        const matchUrl = '(?:./)?' + escapeStringRegexp(readme.path) + '(?:#[^\\\\)\\\\>]*)?';\n        const matchLinks = new RegExp(` {0,3}\\\\[(?:\\\\\\\\[\\\\[\\\\]]|[^\\\\[\\\\]])+\\\\]:?` +\n            ` *\\\\n? *<?(?:${matchUrl})?>?(?:(?: *\\\\n? *| *\\\\n *)((?:\"(?:\\\\\\\\\"|[^\"]|\"[^\"\\\\n]*\")*\"|'\\\\n?` +\n            `(?:[^'\\\\n]+\\\\n?)*'|\\\\(${matchUrl}\\\\))))? *(?:\\\\n+|$)`, 'g');\n\n        this.definitions.forEach((otherReadme) => {\n            let content = otherReadme.content;\n            const matches = content.match(matchLinks);\n\n            if (!matches) {\n                return;\n            }\n\n            // Array unique.\n            Array.from(new Set(matches)).forEach((match) => {\n                let replacement = match.replace(readme.path, newPath);\n                content = content.replace(match, replacement);\n            });\n\n            otherReadme.content = content;\n        });\n\n        readme.path = newPath;\n    }\n\n    /**\n     * Updates paths of readme files.\n     *\n     * @param {Function} callback\n     */\n    public updatePaths(callback: Function) {\n        this.definitions.forEach((readme) =>\n            this.updatePath(readme, callback(readme)));\n    }\n\n    /**\n     * Gets the root readme file.\n     *\n     * @returns {Readme}\n     */\n    public getRoot(): Readme {\n        return this.definitions.find((readme) => readme.isRoot);\n    }\n\n    /**\n     * Gets all readme definitions.\n     *\n     * @returns {Readme[]}\n     */\n    public getDefinitions() {\n        return this.definitions;\n    }\n\n}\n"]}