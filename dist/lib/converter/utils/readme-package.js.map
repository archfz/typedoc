{"version":3,"file":"readme-package.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/readme-package.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as markdownLinkExtractor from 'markdown-link-extractor';\nimport * as escapeStringRegexp from 'escape-string-regexp';\n\nimport Readme from './readme';\n\n/**\n * Container for a readme linked collection.\n */\nexport default class ReadmePackage {\n\n    /**\n     * All the readme file definitions.\n     */\n    protected definitions: Readme[];\n\n    /**\n     * Creates a readme package.\n     *\n     * @param {Readme[]} definitions\n     *   The readme file definitions.\n     */\n    private constructor(definitions: Readme[]) {\n        this.definitions = definitions;\n    }\n\n    /**\n     * Create readme package from base file.\n     *\n     * @param {string} readmePath\n     *   The base readme path.\n     *\n     * @returns {ReadmePackage}\n     */\n    public static createFromBase(readmePath: string) {\n        let mdPages: Readme[] = [];\n        this.loadDefinitions(mdPages, Path.dirname(readmePath), Path.basename(readmePath));\n\n        return new this(mdPages);\n    }\n\n    /**\n     * Loads all linked readme file definitions from base readme.\n     *\n     * @param {Readme[]} pages\n     * @param {string} currentDirectory\n     * @param {string} fileName\n     * @param {boolean} isRoot\n     */\n    protected static loadDefinitions(pages: Readme[], currentDirectory: string, fileName: string, basePath: string = '', isRoot: boolean = true) {\n        const fullPath = Path.join(currentDirectory, fileName);\n        const readmeContents: string = FS.readFileSync(fullPath, 'utf-8');\n\n        // Get MD file links.\n        const mdFiles = markdownLinkExtractor(readmeContents).filter((link: string) => {\n            return !link.match(/^(ftp|https?):\\/\\/.*/) &&\n                link.match(/.*\\.(?:md|MD|mD|Md)$/);\n        });\n\n        pages.push(new Readme(readmeContents, Path.join(basePath, fileName), isRoot));\n\n        // Gather MD file contents\n        mdFiles.forEach((filePath: string) => {\n            const fileFullPath = Path.join(currentDirectory, filePath);\n            const normalizedPath = Path.normalize(filePath);\n            const normalizedBasePath = Path.join(basePath, filePath);\n            const newBasePath = Path.join(basePath, Path.dirname(filePath));\n\n            if (!FS.existsSync(fileFullPath)) {\n                return;\n            }\n\n            if (normalizedPath === Path.normalize(fileName)) {\n                return;\n            }\n\n            // Parse only if we did not yet to prevent infinite loop.\n            if (!pages.find((readme) => readme.path === normalizedBasePath)) {\n                this.loadDefinitions(\n                    pages,\n                    Path.dirname(fileFullPath),\n                    Path.basename(fileFullPath),\n                    newBasePath,\n                    false\n                );\n            }\n        });\n    }\n\n    /**\n     * Updates path of a given readme file.\n     *\n     * @param {Readme} readme\n     * @param {string} newPath\n     */\n    public updatePath(readme: Readme, newPath: string) {\n        if (!this.definitions.find((r) => readme === r)) {\n            return;\n        }\n\n        this.definitions.forEach((otherReadme) => {\n            const relativePath = Path.join(Path.relative(Path.dirname(otherReadme.path), Path.dirname(readme.path)), Path.basename(readme.path));\n\n            const matchUrl = '(?:./)?' + escapeStringRegexp(relativePath) + '(?:#[^\\\\)\\\\>]*)?';\n            const matchLinks = new RegExp(` {0,3}\\\\[(?:\\\\\\\\[\\\\[\\\\]]|[^\\\\[\\\\]])+\\\\]:?` +\n                ` *\\\\n? *<?(?:${matchUrl})?>?(?:(?: *\\\\n? *| *\\\\n *)((?:\"(?:\\\\\\\\\"|[^\"]|\"[^\"\\\\n]*\")*\"|'\\\\n?` +\n                `(?:[^'\\\\n]+\\\\n?)*'|\\\\(${matchUrl}\\\\))))`, 'g');\n\n            let content = otherReadme.content;\n            const matches = content.match(matchLinks);\n\n            if (!matches) {\n                return;\n            }\n\n            const newRelativePath = Path.join(Path.relative(Path.dirname(otherReadme.path), Path.dirname(newPath)), Path.basename(newPath));\n\n            // Array unique.\n            Array.from(new Set(matches)).forEach((match) => {\n                let replacement = match.replace(relativePath, newRelativePath);\n                content = content.replace(match, replacement);\n            });\n\n            otherReadme.content = content;\n        });\n\n        readme.path = newPath;\n    }\n\n    /**\n     * Updates paths of readme files.\n     *\n     * @param {Function} callback\n     */\n    public updatePaths(callback: Function) {\n        this.definitions.forEach((readme) =>\n            this.updatePath(readme, callback(readme)));\n    }\n\n    /**\n     * Gets the root readme file.\n     *\n     * @returns {Readme}\n     */\n    public getRoot(): Readme {\n        return this.definitions.find((readme) => readme.isRoot);\n    }\n\n    /**\n     * Gets all readme definitions.\n     *\n     * @returns {Readme[]}\n     */\n    public getDefinitions() {\n        return this.definitions;\n    }\n\n}\n"]}